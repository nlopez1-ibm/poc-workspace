# Application properties used by zAppBuild/language/Cobol.groovy

#
# default COBOL program build rank - used to sort language build file list
# leave empty - overridden by file properties if sorting needed
# dont provide extension as asm is a valid static sub for cobol too
cobol_fileBuildRank=10 :: **/cobol-dual/*.cbl, 15 :: **/common-static-calls/*.*

#
# COBOL dependency resolution rules
# Rules defined in application.properties
# ** deprecated **, please consider moving to new SearchPathDepedencyAPI leveraging zunit_dependencySearch
#cobol_resolutionRules=[${copybookRule}]

#
# COBOL dependencySearch configuration
# searchPath defined in application.properties
cobol_dependencySearch=${copybookSearch}

#
# default COBOL compiler version
# can be overridden by file properties
cobol_compilerVersion=V6

#
# default COBOL maximum RCs allowed
# can be overridden by file properties
cobol_compileMaxRC=4
cobol_linkEditMaxRC=4

#
# lists of properties which should cause a rebuild after being changed
cobol_impactPropertyList=cobol_compilerVersion,cobol_compileParms
cobol_impactPropertyListCICS=cobol_compileCICSParms
cobol_impactPropertyListSQL=cobol_compileSQLParms

#
# default COBOL compiler parameters
# can be overridden by file properties
cobol_compileParms=MAP
cobol_compileCICSParms=CICS
cobol_compileSQLParms=SQL
cobol_compileErrorPrefixParms=ADATA,EX(ADX(ELAXMGUX))

# Compile Options for IBM Debugger. Assuming to keep Dwarf Files inside the load.
# If you would like to separate debug info, additional allocations needed (See COBOL + Debugger libraries)
cobol_compileDebugParms=TEST

#
# default LinkEdit parameters
# can be overridden by file properties
cobol_linkEditParms=MAP,RENT,COMPAT(PM5)

# If you would like to have a physical link card, we generated it for you given the below pattern
# This property has priority over cobol_linkDebugExit
# cobol_linkEditStream=    INCLUDE OBJECT(@{member})
cobol_linkEditStream=

# If using a debug exit, provide the SYSLIN instream DD
# Samp: cobol_linkDebugExit=    INCLUDE OBJECT(@{member})  \n    INCLUDE SYSLIB(EQAD3CXT)
# Identify can be up to 80byes 
cobol_linkDebugExit=  INCLUDE OBJECT(@{member})\n  INCLUDE SYSLIB(EQAD3CXT)\n  
 


#
# execute link edit step
# can be overridden by file properties
cobol_linkEdit=true

#
# store abbrev git hash in ssi field
# available for buildTypes impactBuild, mergeBuild and fullBuild
# can be overridden by file properties
cobol_storeSSI=true

#
# default deployType
cobol_deployType=LOAD

#
# deployType for build files with isCICS=true
cobol_deployTypeCICS=CICSLOAD

#
# deployType for build files with isDLI=true
cobol_deployTypeDLI=IMSLOAD

#
# scan link edit load module for link dependencies
# can be overridden by file properties

#cobol_scanLoadModule=true
# when src scanners are diabales for limnk ref and this is diabled, main mod do not show static depend.  as expected
# aside not scanONly does not populate outputs coll
# tests- disables cobol prop linkrule and linksrc to see if they updt meta for main and its static.  They dod not
# enable this again to retest that this is the only way to update a min ameta dep list 
cobol_scanLoadModule=true 

#
# additional libraries for compile SYSLIB concatenation, comma-separated
cobol_compileSyslibConcatenation=

#
# additional libraries for linkEdit SYSLIB concatenation, comma-separated
# Example syslib for static call pick fro ma jenkins pipe or, prod
# adding user build load for static cal pick up
cobol_linkEditSyslibConcatenation=${hlq}.load,IBMUSER.JENKINS.LOAD, ZDEV.MAIN.LOAD
